void printkdistanceNodeDown(node *root, int k)
{
   if(root==NULL||k<0)
     return ;
    if(k==0)   
    {
    cout<<root->data<<endl;
    return;
    }
    
    printkdistanceNodeDown(root->left,k-1);
    printkdistanceNodeDown(root->right,k-1);
}
 
// Prints all nodes at distance k from a given target node.
// The k distant nodes may be upward or downward.  This function
// Returns distance of root from target node, it returns -1 if target
// node is not present in tree rooted with root.
int printkdistanceNode(node* root, node* target , int k)
{
   if(root==NULL)
    return -1;
    
    if(root==target)
       {
             printkdistanceNodeDown(root,k);
             return 0;
       }
    
    int dl=printkdistanceNode(root->left,target,k);
    if(dl!=-1)
    {
        if(dl+1==k)
        {
            cout<<root->data;
        }
        else
        {
            printkdistanceNodeDown(root->right,k-dl-2);
        }
        return dl+1;
    }
    int dr=printkdistanceNode(root->right,target,k);
    if(dr!=-1)
    {
        if(dr+1==k)
        {
            cout<<root->data;
        }
        else
        {
            printkdistanceNodeDown(root->left,k-dr-2);
        }
        return dr+1;
    }
    return -1;
}
